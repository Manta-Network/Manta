// Copyright 2020-2024 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for manta_collator_selection
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-21, STEPS: `50`, REPEAT: 40, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json
// --steps=50
// --repeat=40
// --pallet=manta_collator_selection
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/manta_collator_selection.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for manta_collator_selection.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_candidacy_bond() -> Weight;
	fn set_eviction_baseline() -> Weight;
	fn set_eviction_tolerance() -> Weight;
	fn register_as_candidate(c: u32, ) -> Weight;
	fn leave_intent(c: u32, ) -> Weight;
	fn remove_collator(c: u32, ) -> Weight;
	fn register_candidate(c: u32, ) -> Weight;
	fn note_author() -> Weight;
	fn new_session(c: u32, ) -> Weight;
}

/// Weights for manta_collator_selection using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> manta_collator_selection::WeightInfo for SubstrateWeight<T> {
	/// Storage: CollatorSelection Invulnerables (r:0 w:1)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 5]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_805_000 picoseconds.
		Weight::from_parts(8_173_348, 0)
			// Standard Error: 2_139
			.saturating_add(Weight::from_parts(21_344, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
	/// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_440_000 picoseconds.
		Weight::from_parts(9_928_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection CandidacyBond (r:0 w:1)
	/// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_287_000 picoseconds.
		Weight::from_parts(7_775_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection EvictionBaseline (r:0 w:1)
	/// Proof Skipped: CollatorSelection EvictionBaseline (max_values: Some(1), max_size: None, mode: Measured)
	fn set_eviction_baseline() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_171_000 picoseconds.
		Weight::from_parts(7_396_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection EvictionTolerance (r:0 w:1)
	/// Proof Skipped: CollatorSelection EvictionTolerance (max_values: Some(1), max_size: None, mode: Measured)
	fn set_eviction_tolerance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_192_000 picoseconds.
		Weight::from_parts(7_500_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	/// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session NextKeys (r:1 w:0)
	/// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	/// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	/// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `542 + c * (60 ±0)`
		//  Estimated: `4019 + c * (60 ±0)`
		// Minimum execution time: 45_746_000 picoseconds.
		Weight::from_parts(49_460_467, 4019)
			// Standard Error: 3_046
			.saturating_add(Weight::from_parts(255_457, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 60).saturating_mul(c.into()))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `222 + c * (48 ±0)`
		//  Estimated: `1711 + c * (49 ±0)`
		// Minimum execution time: 29_425_000 picoseconds.
		Weight::from_parts(32_528_533, 1711)
			// Standard Error: 2_053
			.saturating_add(Weight::from_parts(201_249, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(c.into()))
	}
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn remove_collator(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `281 + c * (48 ±0)`
		//  Estimated: `1770 + c * (49 ±0)`
		// Minimum execution time: 31_795_000 picoseconds.
		Weight::from_parts(34_846_229, 1770)
			// Standard Error: 2_196
			.saturating_add(Weight::from_parts(201_858, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(c.into()))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	/// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session NextKeys (r:1 w:0)
	/// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	/// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	/// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn register_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `542 + c * (60 ±0)`
		//  Estimated: `4019 + c * (60 ±0)`
		// Minimum execution time: 44_891_000 picoseconds.
		Weight::from_parts(48_814_765, 4019)
			// Standard Error: 2_686
			.saturating_add(Weight::from_parts(247_986, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 60).saturating_mul(c.into()))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CollatorSelection BlocksPerCollatorThisSession (r:1 w:1)
	/// Proof Skipped: CollatorSelection BlocksPerCollatorThisSession (max_values: None, max_size: None, mode: Measured)
	/// Storage: System BlockWeight (r:1 w:1)
	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `6196`
		// Minimum execution time: 47_420_000 picoseconds.
		Weight::from_parts(47_983_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection EvictionBaseline (r:1 w:0)
	/// Proof Skipped: CollatorSelection EvictionBaseline (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection EvictionTolerance (r:1 w:0)
	/// Proof Skipped: CollatorSelection EvictionTolerance (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection BlocksPerCollatorThisSession (r:51 w:2)
	/// Proof Skipped: CollatorSelection BlocksPerCollatorThisSession (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:49 w:49)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System BlockWeight (r:1 w:1)
	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn new_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `124 + c * (229 ±0)`
		//  Estimated: `3598 + c * (2704 ±0)`
		// Minimum execution time: 33_949_000 picoseconds.
		Weight::from_parts(25_999_753, 3598)
			// Standard Error: 11_769
			.saturating_add(Weight::from_parts(26_374_574, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2704).saturating_mul(c.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: CollatorSelection Invulnerables (r:0 w:1)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 5]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_805_000 picoseconds.
		Weight::from_parts(8_173_348, 0)
			// Standard Error: 2_139
			.saturating_add(Weight::from_parts(21_344, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
	/// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_440_000 picoseconds.
		Weight::from_parts(9_928_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection CandidacyBond (r:0 w:1)
	/// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_287_000 picoseconds.
		Weight::from_parts(7_775_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection EvictionBaseline (r:0 w:1)
	/// Proof Skipped: CollatorSelection EvictionBaseline (max_values: Some(1), max_size: None, mode: Measured)
	fn set_eviction_baseline() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_171_000 picoseconds.
		Weight::from_parts(7_396_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection EvictionTolerance (r:0 w:1)
	/// Proof Skipped: CollatorSelection EvictionTolerance (max_values: Some(1), max_size: None, mode: Measured)
	fn set_eviction_tolerance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_192_000 picoseconds.
		Weight::from_parts(7_500_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	/// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session NextKeys (r:1 w:0)
	/// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	/// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	/// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `542 + c * (60 ±0)`
		//  Estimated: `4019 + c * (60 ±0)`
		// Minimum execution time: 45_746_000 picoseconds.
		Weight::from_parts(49_460_467, 4019)
			// Standard Error: 3_046
			.saturating_add(Weight::from_parts(255_457, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 60).saturating_mul(c.into()))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `222 + c * (48 ±0)`
		//  Estimated: `1711 + c * (49 ±0)`
		// Minimum execution time: 29_425_000 picoseconds.
		Weight::from_parts(32_528_533, 1711)
			// Standard Error: 2_053
			.saturating_add(Weight::from_parts(201_249, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(c.into()))
	}
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn remove_collator(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `281 + c * (48 ±0)`
		//  Estimated: `1770 + c * (49 ±0)`
		// Minimum execution time: 31_795_000 picoseconds.
		Weight::from_parts(34_846_229, 1770)
			// Standard Error: 2_196
			.saturating_add(Weight::from_parts(201_858, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(c.into()))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	/// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session NextKeys (r:1 w:0)
	/// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	/// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	/// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn register_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `542 + c * (60 ±0)`
		//  Estimated: `4019 + c * (60 ±0)`
		// Minimum execution time: 44_891_000 picoseconds.
		Weight::from_parts(48_814_765, 4019)
			// Standard Error: 2_686
			.saturating_add(Weight::from_parts(247_986, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 60).saturating_mul(c.into()))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CollatorSelection BlocksPerCollatorThisSession (r:1 w:1)
	/// Proof Skipped: CollatorSelection BlocksPerCollatorThisSession (max_values: None, max_size: None, mode: Measured)
	/// Storage: System BlockWeight (r:1 w:1)
	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `146`
		//  Estimated: `6196`
		// Minimum execution time: 47_420_000 picoseconds.
		Weight::from_parts(47_983_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: CollatorSelection Candidates (r:1 w:1)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection EvictionBaseline (r:1 w:0)
	/// Proof Skipped: CollatorSelection EvictionBaseline (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection EvictionTolerance (r:1 w:0)
	/// Proof Skipped: CollatorSelection EvictionTolerance (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorSelection BlocksPerCollatorThisSession (r:51 w:2)
	/// Proof Skipped: CollatorSelection BlocksPerCollatorThisSession (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:49 w:49)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
	/// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System BlockWeight (r:1 w:1)
	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 50]`.
	fn new_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `124 + c * (229 ±0)`
		//  Estimated: `3598 + c * (2704 ±0)`
		// Minimum execution time: 33_949_000 picoseconds.
		Weight::from_parts(25_999_753, 3598)
			// Standard Error: 11_769
			.saturating_add(Weight::from_parts(26_374_574, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2704).saturating_mul(c.into()))
	}
}