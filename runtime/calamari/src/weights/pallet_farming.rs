// Copyright 2020-2024 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-21, STEPS: `50`, REPEAT: 40, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json
// --steps=50
// --repeat=40
// --pallet=pallet_farming
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_farming.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_farming.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn create_farming_pool() -> Weight;
	fn charge() -> Weight;
	fn deposit() -> Weight;
	fn withdraw() -> Weight;
	fn claim() -> Weight;
	fn gauge_withdraw() -> Weight;
}

/// Weights for pallet_farming using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_farming::WeightInfo for SubstrateWeight<T> {
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2105`
		//  Estimated: `5570`
		// Minimum execution time: 12_403_000 picoseconds.
		Weight::from_parts(12_771_000, 5570)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Farming PoolNextId (r:1 w:1)
	/// Proof Skipped: Farming PoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolNextId (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:0 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:0 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn create_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 18_751_000 picoseconds.
		Weight::from_parts(19_141_000, 1491)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(222), added: 2697, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(146), added: 2621, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn charge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1330`
		//  Estimated: `6232`
		// Minimum execution time: 68_957_000 picoseconds.
		Weight::from_parts(70_145_000, 6232)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(222), added: 2697, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(146), added: 2621, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1504`
		//  Estimated: `6232`
		// Minimum execution time: 76_664_000 picoseconds.
		Weight::from_parts(78_533_000, 6232)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `506`
		//  Estimated: `3971`
		// Minimum execution time: 32_214_000 picoseconds.
		Weight::from_parts(32_801_000, 3971)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `3975`
		// Minimum execution time: 33_518_000 picoseconds.
		Weight::from_parts(34_452_000, 3975)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn gauge_withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `893`
		//  Estimated: `4358`
		// Minimum execution time: 36_962_000 picoseconds.
		Weight::from_parts(37_814_000, 4358)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2105`
		//  Estimated: `5570`
		// Minimum execution time: 12_403_000 picoseconds.
		Weight::from_parts(12_771_000, 5570)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Farming PoolNextId (r:1 w:1)
	/// Proof Skipped: Farming PoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolNextId (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolNextId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Farming GaugePoolInfos (r:0 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:0 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	fn create_farming_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 18_751_000 picoseconds.
		Weight::from_parts(19_141_000, 1491)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(222), added: 2697, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(146), added: 2621, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn charge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1330`
		//  Estimated: `6232`
		// Minimum execution time: 68_957_000 picoseconds.
		Weight::from_parts(70_145_000, 6232)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(222), added: 2697, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: None, max_size: Some(146), added: 2621, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1504`
		//  Estimated: `6232`
		// Minimum execution time: 76_664_000 picoseconds.
		Weight::from_parts(78_533_000, 6232)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `506`
		//  Estimated: `3971`
		// Minimum execution time: 32_214_000 picoseconds.
		Weight::from_parts(32_801_000, 3971)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming PoolInfos (r:1 w:1)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:1)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:0)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `3975`
		// Minimum execution time: 33_518_000 picoseconds.
		Weight::from_parts(34_452_000, 3975)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Farming GaugePoolInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugePoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming GaugeInfos (r:1 w:1)
	/// Proof Skipped: Farming GaugeInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming PoolInfos (r:1 w:0)
	/// Proof Skipped: Farming PoolInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Farming SharesAndWithdrawnRewards (r:1 w:0)
	/// Proof Skipped: Farming SharesAndWithdrawnRewards (max_values: None, max_size: None, mode: Measured)
	fn gauge_withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `893`
		//  Estimated: `4358`
		// Minimum execution time: 36_962_000 picoseconds.
		Weight::from_parts(37_814_000, 4358)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}