// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("calamari-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=calamari-dev
// --steps=50
// --repeat=20
// --pallet=pallet_democracy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_democracy.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use manta_primitives::constants::RocksDbWeight;

/// Weight functions needed for pallet_democracy.
pub trait WeightInfo {
    fn propose() -> Weight;
    fn second() -> Weight;
    fn vote_new() -> Weight;
    fn vote_existing() -> Weight;
    fn emergency_cancel() -> Weight;
    fn blacklist() -> Weight;
    fn external_propose() -> Weight;
    fn external_propose_majority() -> Weight;
    fn external_propose_default() -> Weight;
    fn fast_track() -> Weight;
    fn veto_external() -> Weight;
    fn cancel_proposal() -> Weight;
    fn cancel_referendum() -> Weight;
    fn on_initialize_base(r: u32, ) -> Weight;
    fn on_initialize_base_with_launch_period(r: u32, ) -> Weight;
    fn delegate(r: u32, ) -> Weight;
    fn undelegate(r: u32, ) -> Weight;
    fn clear_public_proposals() -> Weight;
    fn unlock_remove(r: u32, ) -> Weight;
    fn unlock_set(r: u32, ) -> Weight;
    fn remove_vote(r: u32, ) -> Weight;
    fn remove_other_vote(r: u32, ) -> Weight;
}

/// Weights for pallet_democracy using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_democracy::WeightInfo for SubstrateWeight<T> {
    // Storage: Democracy PublicPropCount (r:1 w:1)
    // Storage: Democracy PublicProps (r:1 w:1)
    // Storage: Democracy Blacklist (r:1 w:0)
    // Storage: Democracy DepositOf (r:0 w:1)
    fn propose() -> Weight {
        // Minimum execution time: 56_868 nanoseconds.
        Weight::from_ref_time(57_788_000_u64)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Democracy DepositOf (r:1 w:1)
    fn second() -> Weight {
        // Minimum execution time: 49_328 nanoseconds.
        Weight::from_ref_time(49_764_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vote_new() -> Weight {
        // Minimum execution time: 60_323 nanoseconds.
        Weight::from_ref_time(61_389_000_u64)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vote_existing() -> Weight {
        // Minimum execution time: 60_612 nanoseconds.
        Weight::from_ref_time(61_282_000_u64)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy Cancellations (r:1 w:1)
    fn emergency_cancel() -> Weight {
        // Minimum execution time: 24_780 nanoseconds.
        Weight::from_ref_time(25_194_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Democracy PublicProps (r:1 w:1)
    // Storage: Democracy DepositOf (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy Blacklist (r:0 w:1)
    fn blacklist() -> Weight {
        // Minimum execution time: 85_177 nanoseconds.
        Weight::from_ref_time(91_733_000_u64)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy Blacklist (r:1 w:0)
    fn external_propose() -> Weight {
        // Minimum execution time: 19_483 nanoseconds.
        Weight::from_ref_time(19_914_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy NextExternal (r:0 w:1)
    fn external_propose_majority() -> Weight {
        // Minimum execution time: 4_963 nanoseconds.
        Weight::from_ref_time(5_250_000_u64)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy NextExternal (r:0 w:1)
    fn external_propose_default() -> Weight {
        // Minimum execution time: 5_075 nanoseconds.
        Weight::from_ref_time(5_187_000_u64)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy ReferendumCount (r:1 w:1)
    // Storage: Democracy ReferendumInfoOf (r:0 w:1)
    fn fast_track() -> Weight {
        // Minimum execution time: 23_956 nanoseconds.
        Weight::from_ref_time(24_814_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy Blacklist (r:1 w:1)
    fn veto_external() -> Weight {
        // Minimum execution time: 31_472 nanoseconds.
        Weight::from_ref_time(31_770_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Democracy PublicProps (r:1 w:1)
    // Storage: Democracy DepositOf (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn cancel_proposal() -> Weight {
        // Minimum execution time: 73_811 nanoseconds.
        Weight::from_ref_time(78_943_000_u64)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:0 w:1)
    fn cancel_referendum() -> Weight {
        // Minimum execution time: 16_074 nanoseconds.
        Weight::from_ref_time(16_409_000_u64)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy LowestUnbaked (r:1 w:1)
    // Storage: Democracy ReferendumCount (r:1 w:0)
    // Storage: Democracy ReferendumInfoOf (r:2 w:0)
    /// The range of component `r` is `[0, 99]`.
    fn on_initialize_base(r: u32, ) -> Weight {
        // Minimum execution time: 7_430 nanoseconds.
        Weight::from_ref_time(12_086_064_u64)
            // Standard Error: 3_474
            .saturating_add(Weight::from_ref_time(2_283_457_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy LowestUnbaked (r:1 w:1)
    // Storage: Democracy ReferendumCount (r:1 w:0)
    // Storage: Democracy LastTabledWasExternal (r:1 w:0)
    // Storage: Democracy NextExternal (r:1 w:0)
    // Storage: Democracy PublicProps (r:1 w:0)
    // Storage: Democracy ReferendumInfoOf (r:2 w:0)
    /// The range of component `r` is `[0, 99]`.
    fn on_initialize_base_with_launch_period(r: u32, ) -> Weight {
        // Minimum execution time: 9_882 nanoseconds.
        Weight::from_ref_time(14_566_711_u64)
            // Standard Error: 3_354
            .saturating_add(Weight::from_ref_time(2_282_038_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy VotingOf (r:3 w:3)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Democracy ReferendumInfoOf (r:2 w:2)
    /// The range of component `r` is `[0, 99]`.
    fn delegate(r: u32, ) -> Weight {
        // Minimum execution time: 48_840 nanoseconds.
        Weight::from_ref_time(56_403_092_u64)
            // Standard Error: 6_093
            .saturating_add(Weight::from_ref_time(3_344_243_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as u64)))
    }
    // Storage: Democracy VotingOf (r:2 w:2)
    // Storage: Democracy ReferendumInfoOf (r:2 w:2)
    /// The range of component `r` is `[0, 99]`.
    fn undelegate(r: u32, ) -> Weight {
        // Minimum execution time: 30_483 nanoseconds.
        Weight::from_ref_time(32_035_405_u64)
            // Standard Error: 4_383
            .saturating_add(Weight::from_ref_time(3_347_667_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as u64)))
    }
    // Storage: Democracy PublicProps (r:0 w:1)
    fn clear_public_proposals() -> Weight {
        // Minimum execution time: 6_421 nanoseconds.
        Weight::from_ref_time(6_638_000_u64)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    /// The range of component `r` is `[0, 99]`.
    fn unlock_remove(r: u32, ) -> Weight {
        // Minimum execution time: 30_291 nanoseconds.
        Weight::from_ref_time(37_071_950_u64)
            // Standard Error: 1_619
            .saturating_add(Weight::from_ref_time(59_302_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    /// The range of component `r` is `[0, 99]`.
    fn unlock_set(r: u32, ) -> Weight {
        // Minimum execution time: 34_888 nanoseconds.
        Weight::from_ref_time(36_418_789_u64)
            // Standard Error: 906
            .saturating_add(Weight::from_ref_time(109_602_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    /// The range of component `r` is `[1, 100]`.
    fn remove_vote(r: u32, ) -> Weight {
        // Minimum execution time: 18_739 nanoseconds.
        Weight::from_ref_time(21_004_077_u64)
            // Standard Error: 1_075
            .saturating_add(Weight::from_ref_time(116_457_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    /// The range of component `r` is `[1, 100]`.
    fn remove_other_vote(r: u32, ) -> Weight {
        // Minimum execution time: 18_514 nanoseconds.
        Weight::from_ref_time(21_030_667_u64)
            // Standard Error: 1_102
            .saturating_add(Weight::from_ref_time(118_039_u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: Democracy PublicPropCount (r:1 w:1)
    // Storage: Democracy PublicProps (r:1 w:1)
    // Storage: Democracy Blacklist (r:1 w:0)
    // Storage: Democracy DepositOf (r:0 w:1)
    fn propose() -> Weight {
        // Minimum execution time: 56_868 nanoseconds.
        Weight::from_ref_time(57_788_000_u64)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Democracy DepositOf (r:1 w:1)
    fn second() -> Weight {
        // Minimum execution time: 49_328 nanoseconds.
        Weight::from_ref_time(49_764_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vote_new() -> Weight {
        // Minimum execution time: 60_323 nanoseconds.
        Weight::from_ref_time(61_389_000_u64)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vote_existing() -> Weight {
        // Minimum execution time: 60_612 nanoseconds.
        Weight::from_ref_time(61_282_000_u64)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy Cancellations (r:1 w:1)
    fn emergency_cancel() -> Weight {
        // Minimum execution time: 24_780 nanoseconds.
        Weight::from_ref_time(25_194_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Democracy PublicProps (r:1 w:1)
    // Storage: Democracy DepositOf (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy Blacklist (r:0 w:1)
    fn blacklist() -> Weight {
        // Minimum execution time: 85_177 nanoseconds.
        Weight::from_ref_time(91_733_000_u64)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy Blacklist (r:1 w:0)
    fn external_propose() -> Weight {
        // Minimum execution time: 19_483 nanoseconds.
        Weight::from_ref_time(19_914_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy NextExternal (r:0 w:1)
    fn external_propose_majority() -> Weight {
        // Minimum execution time: 4_963 nanoseconds.
        Weight::from_ref_time(5_250_000_u64)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy NextExternal (r:0 w:1)
    fn external_propose_default() -> Weight {
        // Minimum execution time: 5_075 nanoseconds.
        Weight::from_ref_time(5_187_000_u64)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy ReferendumCount (r:1 w:1)
    // Storage: Democracy ReferendumInfoOf (r:0 w:1)
    fn fast_track() -> Weight {
        // Minimum execution time: 23_956 nanoseconds.
        Weight::from_ref_time(24_814_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Democracy NextExternal (r:1 w:1)
    // Storage: Democracy Blacklist (r:1 w:1)
    fn veto_external() -> Weight {
        // Minimum execution time: 31_472 nanoseconds.
        Weight::from_ref_time(31_770_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Democracy PublicProps (r:1 w:1)
    // Storage: Democracy DepositOf (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn cancel_proposal() -> Weight {
        // Minimum execution time: 73_811 nanoseconds.
        Weight::from_ref_time(78_943_000_u64)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:0 w:1)
    fn cancel_referendum() -> Weight {
        // Minimum execution time: 16_074 nanoseconds.
        Weight::from_ref_time(16_409_000_u64)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy LowestUnbaked (r:1 w:1)
    // Storage: Democracy ReferendumCount (r:1 w:0)
    // Storage: Democracy ReferendumInfoOf (r:2 w:0)
    /// The range of component `r` is `[0, 99]`.
    fn on_initialize_base(r: u32, ) -> Weight {
        // Minimum execution time: 7_430 nanoseconds.
        Weight::from_ref_time(12_086_064_u64)
            // Standard Error: 3_474
            .saturating_add(Weight::from_ref_time(2_283_457_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy LowestUnbaked (r:1 w:1)
    // Storage: Democracy ReferendumCount (r:1 w:0)
    // Storage: Democracy LastTabledWasExternal (r:1 w:0)
    // Storage: Democracy NextExternal (r:1 w:0)
    // Storage: Democracy PublicProps (r:1 w:0)
    // Storage: Democracy ReferendumInfoOf (r:2 w:0)
    /// The range of component `r` is `[0, 99]`.
    fn on_initialize_base_with_launch_period(r: u32, ) -> Weight {
        // Minimum execution time: 9_882 nanoseconds.
        Weight::from_ref_time(14_566_711_u64)
            // Standard Error: 3_354
            .saturating_add(Weight::from_ref_time(2_282_038_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy VotingOf (r:3 w:3)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Democracy ReferendumInfoOf (r:2 w:2)
    /// The range of component `r` is `[0, 99]`.
    fn delegate(r: u32, ) -> Weight {
        // Minimum execution time: 48_840 nanoseconds.
        Weight::from_ref_time(56_403_092_u64)
            // Standard Error: 6_093
            .saturating_add(Weight::from_ref_time(3_344_243_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r as u64)))
    }
    // Storage: Democracy VotingOf (r:2 w:2)
    // Storage: Democracy ReferendumInfoOf (r:2 w:2)
    /// The range of component `r` is `[0, 99]`.
    fn undelegate(r: u32, ) -> Weight {
        // Minimum execution time: 30_483 nanoseconds.
        Weight::from_ref_time(32_035_405_u64)
            // Standard Error: 4_383
            .saturating_add(Weight::from_ref_time(3_347_667_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r as u64)))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r as u64)))
    }
    // Storage: Democracy PublicProps (r:0 w:1)
    fn clear_public_proposals() -> Weight {
        // Minimum execution time: 6_421 nanoseconds.
        Weight::from_ref_time(6_638_000_u64)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    /// The range of component `r` is `[0, 99]`.
    fn unlock_remove(r: u32, ) -> Weight {
        // Minimum execution time: 30_291 nanoseconds.
        Weight::from_ref_time(37_071_950_u64)
            // Standard Error: 1_619
            .saturating_add(Weight::from_ref_time(59_302_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Democracy VotingOf (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    /// The range of component `r` is `[0, 99]`.
    fn unlock_set(r: u32, ) -> Weight {
        // Minimum execution time: 34_888 nanoseconds.
        Weight::from_ref_time(36_418_789_u64)
            // Standard Error: 906
            .saturating_add(Weight::from_ref_time(109_602_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    /// The range of component `r` is `[1, 100]`.
    fn remove_vote(r: u32, ) -> Weight {
        // Minimum execution time: 18_739 nanoseconds.
        Weight::from_ref_time(21_004_077_u64)
            // Standard Error: 1_075
            .saturating_add(Weight::from_ref_time(116_457_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Democracy ReferendumInfoOf (r:1 w:1)
    // Storage: Democracy VotingOf (r:1 w:1)
    /// The range of component `r` is `[1, 100]`.
    fn remove_other_vote(r: u32, ) -> Weight {
        // Minimum execution time: 18_514 nanoseconds.
        Weight::from_ref_time(21_030_667_u64)
            // Standard Error: 1_102
            .saturating_add(Weight::from_ref_time(118_039_u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
}

