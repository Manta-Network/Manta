// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("calamari-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=calamari-dev
// --steps=50
// --repeat=20
// --pallet=pallet_scheduler
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_scheduler.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use manta_primitives::constants::RocksDbWeight;

/// Weight functions needed for pallet_scheduler.
pub trait WeightInfo {
    fn service_agendas_base() -> Weight;
    fn service_agenda_base(s: u32, ) -> Weight;
    fn service_task_base() -> Weight;
    fn service_task_fetched(s: u32, ) -> Weight;
    fn service_task_named() -> Weight;
    fn service_task_periodic() -> Weight;
    fn execute_dispatch_signed() -> Weight;
    fn execute_dispatch_unsigned() -> Weight;
    fn schedule(s: u32, ) -> Weight;
    fn cancel(s: u32, ) -> Weight;
    fn schedule_named(s: u32, ) -> Weight;
    fn cancel_named(s: u32, ) -> Weight;
}

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for SubstrateWeight<T> {
    // Storage: Scheduler IncompleteSince (r:1 w:1)
    fn service_agendas_base() -> Weight {
        // Minimum execution time: 5_131 nanoseconds.
        Weight::from_ref_time(5_286_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 512]`.
    fn service_agenda_base(s: u32, ) -> Weight {
        // Minimum execution time: 4_111 nanoseconds.
        Weight::from_ref_time(8_763_440_u64)
            // Standard Error: 783
            .saturating_add(Weight::from_ref_time(372_339_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn service_task_base() -> Weight {
        // Minimum execution time: 10_880 nanoseconds.
        Weight::from_ref_time(11_194_000_u64)
    }
    // Storage: Preimage PreimageFor (r:1 w:1)
    // Storage: Preimage StatusFor (r:1 w:1)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32, ) -> Weight {
        // Minimum execution time: 25_347 nanoseconds.
        Weight::from_ref_time(25_717_000_u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_128_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Scheduler Lookup (r:0 w:1)
    fn service_task_named() -> Weight {
        // Minimum execution time: 12_894 nanoseconds.
        Weight::from_ref_time(13_108_000_u64)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn service_task_periodic() -> Weight {
        // Minimum execution time: 10_667 nanoseconds.
        Weight::from_ref_time(10_908_000_u64)
    }
    fn execute_dispatch_signed() -> Weight {
        // Minimum execution time: 4_124 nanoseconds.
        Weight::from_ref_time(4_680_000_u64)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Minimum execution time: 4_156 nanoseconds.
        Weight::from_ref_time(4_361_000_u64)
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 511]`.
    fn schedule(s: u32, ) -> Weight {
        // Minimum execution time: 20_504 nanoseconds.
        Weight::from_ref_time(27_066_818_u64)
            // Standard Error: 1_114
            .saturating_add(Weight::from_ref_time(372_897_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: Scheduler Lookup (r:0 w:1)
    /// The range of component `s` is `[1, 512]`.
    fn cancel(s: u32, ) -> Weight {
        // Minimum execution time: 21_686 nanoseconds.
        Weight::from_ref_time(25_696_496_u64)
            // Standard Error: 1_261
            .saturating_add(Weight::from_ref_time(362_498_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 511]`.
    fn schedule_named(s: u32, ) -> Weight {
        // Minimum execution time: 23_084 nanoseconds.
        Weight::from_ref_time(31_255_518_u64)
            // Standard Error: 1_258
            .saturating_add(Weight::from_ref_time(382_534_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[1, 512]`.
    fn cancel_named(s: u32, ) -> Weight {
        // Minimum execution time: 23_862 nanoseconds.
        Weight::from_ref_time(28_591_336_u64)
            // Standard Error: 742
            .saturating_add(Weight::from_ref_time(369_305_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: Scheduler IncompleteSince (r:1 w:1)
    fn service_agendas_base() -> Weight {
        // Minimum execution time: 5_131 nanoseconds.
        Weight::from_ref_time(5_286_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 512]`.
    fn service_agenda_base(s: u32, ) -> Weight {
        // Minimum execution time: 4_111 nanoseconds.
        Weight::from_ref_time(8_763_440_u64)
            // Standard Error: 783
            .saturating_add(Weight::from_ref_time(372_339_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn service_task_base() -> Weight {
        // Minimum execution time: 10_880 nanoseconds.
        Weight::from_ref_time(11_194_000_u64)
    }
    // Storage: Preimage PreimageFor (r:1 w:1)
    // Storage: Preimage StatusFor (r:1 w:1)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32, ) -> Weight {
        // Minimum execution time: 25_347 nanoseconds.
        Weight::from_ref_time(25_717_000_u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_128_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Scheduler Lookup (r:0 w:1)
    fn service_task_named() -> Weight {
        // Minimum execution time: 12_894 nanoseconds.
        Weight::from_ref_time(13_108_000_u64)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn service_task_periodic() -> Weight {
        // Minimum execution time: 10_667 nanoseconds.
        Weight::from_ref_time(10_908_000_u64)
    }
    fn execute_dispatch_signed() -> Weight {
        // Minimum execution time: 4_124 nanoseconds.
        Weight::from_ref_time(4_680_000_u64)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Minimum execution time: 4_156 nanoseconds.
        Weight::from_ref_time(4_361_000_u64)
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 511]`.
    fn schedule(s: u32, ) -> Weight {
        // Minimum execution time: 20_504 nanoseconds.
        Weight::from_ref_time(27_066_818_u64)
            // Standard Error: 1_114
            .saturating_add(Weight::from_ref_time(372_897_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: Scheduler Lookup (r:0 w:1)
    /// The range of component `s` is `[1, 512]`.
    fn cancel(s: u32, ) -> Weight {
        // Minimum execution time: 21_686 nanoseconds.
        Weight::from_ref_time(25_696_496_u64)
            // Standard Error: 1_261
            .saturating_add(Weight::from_ref_time(362_498_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 511]`.
    fn schedule_named(s: u32, ) -> Weight {
        // Minimum execution time: 23_084 nanoseconds.
        Weight::from_ref_time(31_255_518_u64)
            // Standard Error: 1_258
            .saturating_add(Weight::from_ref_time(382_534_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[1, 512]`.
    fn cancel_named(s: u32, ) -> Weight {
        // Minimum execution time: 23_862 nanoseconds.
        Weight::from_ref_time(28_591_336_u64)
            // Standard Error: 742
            .saturating_add(Weight::from_ref_time(369_305_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
}
