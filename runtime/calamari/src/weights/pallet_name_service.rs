// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_name_service
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-21, STEPS: `50`, REPEAT: 40, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json
// --steps=50
// --repeat=40
// --pallet=pallet_name_service
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_name_service.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_name_service.
pub trait WeightInfo {
	fn register() -> Weight;
	fn accept_register() -> Weight;
	fn set_primary_name() -> Weight;
	fn cancel_pending_register() -> Weight;
	fn remove_register() -> Weight;
}

/// Weights for pallet_name_service using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_name_service::WeightInfo for SubstrateWeight<T> {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: NameService PendingRegister (r:1 w:1)
	/// Proof Skipped: NameService PendingRegister (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService UsernameRecords (r:1 w:0)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3593`
		// Minimum execution time: 57_778_000 picoseconds.
		Weight::from_parts(58_874_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: NameService PendingRegister (r:1 w:1)
	/// Proof Skipped: NameService PendingRegister (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService UsernameRecords (r:0 w:1)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	fn accept_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 20_227_000 picoseconds.
		Weight::from_parts(20_858_000, 3610)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: NameService UsernameRecords (r:1 w:0)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService PrimaryRecords (r:1 w:1)
	/// Proof Skipped: NameService PrimaryRecords (max_values: None, max_size: None, mode: Measured)
	fn set_primary_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111`
		//  Estimated: `3576`
		// Minimum execution time: 19_340_000 picoseconds.
		Weight::from_parts(19_731_000, 3576)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: NameService PendingRegister (r:1 w:1)
	/// Proof Skipped: NameService PendingRegister (max_values: None, max_size: None, mode: Measured)
	fn cancel_pending_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 18_040_000 picoseconds.
		Weight::from_parts(18_615_000, 3610)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: NameService UsernameRecords (r:1 w:1)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService PrimaryRecords (r:1 w:0)
	/// Proof Skipped: NameService PrimaryRecords (max_values: None, max_size: None, mode: Measured)
	fn remove_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111`
		//  Estimated: `3576`
		// Minimum execution time: 19_179_000 picoseconds.
		Weight::from_parts(19_613_000, 3576)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: NameService PendingRegister (r:1 w:1)
	/// Proof Skipped: NameService PendingRegister (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService UsernameRecords (r:1 w:0)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3593`
		// Minimum execution time: 57_778_000 picoseconds.
		Weight::from_parts(58_874_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: NameService PendingRegister (r:1 w:1)
	/// Proof Skipped: NameService PendingRegister (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService UsernameRecords (r:0 w:1)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	fn accept_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 20_227_000 picoseconds.
		Weight::from_parts(20_858_000, 3610)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: NameService UsernameRecords (r:1 w:0)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService PrimaryRecords (r:1 w:1)
	/// Proof Skipped: NameService PrimaryRecords (max_values: None, max_size: None, mode: Measured)
	fn set_primary_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111`
		//  Estimated: `3576`
		// Minimum execution time: 19_340_000 picoseconds.
		Weight::from_parts(19_731_000, 3576)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: NameService PendingRegister (r:1 w:1)
	/// Proof Skipped: NameService PendingRegister (max_values: None, max_size: None, mode: Measured)
	fn cancel_pending_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 18_040_000 picoseconds.
		Weight::from_parts(18_615_000, 3610)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: NameService UsernameRecords (r:1 w:1)
	/// Proof Skipped: NameService UsernameRecords (max_values: None, max_size: None, mode: Measured)
	/// Storage: NameService PrimaryRecords (r:1 w:0)
	/// Proof Skipped: NameService PrimaryRecords (max_values: None, max_size: None, mode: Measured)
	fn remove_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111`
		//  Estimated: `3576`
		// Minimum execution time: 19_179_000 picoseconds.
		Weight::from_parts(19_613_000, 3576)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}