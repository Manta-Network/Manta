// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("calamari-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=calamari-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_collective.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use manta_primitives::constants::RocksDbWeight;

/// Weight functions needed for pallet_collective.
pub trait WeightInfo {
    fn set_members(m: u32, n: u32, p: u32, ) -> Weight;
    fn execute(b: u32, m: u32, ) -> Weight;
    fn propose_execute(b: u32, m: u32, ) -> Weight;
    fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
    fn vote(m: u32, ) -> Weight;
    fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
    fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
    fn close_disapproved(m: u32, p: u32, ) -> Weight;
    fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
    fn disapprove_proposal(p: u32, ) -> Weight;
}

/// Weights for pallet_collective using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for SubstrateWeight<T> {
    // Storage: Council Members (r:1 w:1)
    // Storage: Council Proposals (r:1 w:0)
    // Storage: Council Voting (r:100 w:100)
    // Storage: Council Prime (r:0 w:1)
    fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(0)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(10_408_000).saturating_mul(m as u64))
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(13_811_000).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as u64)))
    }
    // Storage: Council Members (r:1 w:0)
    fn execute(b: u32, m: u32, ) -> Weight {
        Weight::from_ref_time(18_768_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_000).saturating_mul(b as u64))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(23_000).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    // Storage: Council Members (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:0)
    fn propose_execute(b: u32, m: u32, ) -> Weight {
        Weight::from_ref_time(21_725_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_000).saturating_mul(b as u64))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(35_000).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
    }
    // Storage: Council Members (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:1)
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council ProposalCount (r:1 w:1)
    // Storage: Council Voting (r:0 w:1)
    fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(21_190_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(10_000).saturating_mul(b as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(38_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(207_000).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Voting (r:1 w:1)
    fn vote(m: u32, ) -> Weight {
        Weight::from_ref_time(34_223_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(60_000).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council ProposalOf (r:0 w:1)
    fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(35_295_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(15_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(139_000).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:1)
    // Storage: Council Proposals (r:1 w:1)
    fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(39_851_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(5_000).saturating_mul(b as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(42_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(182_000).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Prime (r:1 w:0)
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council ProposalOf (r:0 w:1)
    fn close_disapproved(m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(36_649_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(38_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(134_000).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Prime (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:1)
    // Storage: Council Proposals (r:1 w:1)
    fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(38_815_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(6_000).saturating_mul(b as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(64_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(197_000).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council Voting (r:0 w:1)
    // Storage: Council ProposalOf (r:0 w:1)
    fn disapprove_proposal(p: u32, ) -> Weight {
        Weight::from_ref_time(20_447_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(192_000).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: Council Members (r:1 w:1)
    // Storage: Council Proposals (r:1 w:0)
    // Storage: Council Voting (r:100 w:100)
    // Storage: Council Prime (r:0 w:1)
    fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(0)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(10_408_000).saturating_mul(m as u64))
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(13_811_000).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p as u64)))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p as u64)))
    }
    // Storage: Council Members (r:1 w:0)
    fn execute(b: u32, m: u32, ) -> Weight {
        Weight::from_ref_time(18_768_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_000).saturating_mul(b as u64))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(23_000).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    // Storage: Council Members (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:0)
    fn propose_execute(b: u32, m: u32, ) -> Weight {
        Weight::from_ref_time(21_725_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_000).saturating_mul(b as u64))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(35_000).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
    }
    // Storage: Council Members (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:1)
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council ProposalCount (r:1 w:1)
    // Storage: Council Voting (r:0 w:1)
    fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(21_190_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(10_000).saturating_mul(b as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(38_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(207_000).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Voting (r:1 w:1)
    fn vote(m: u32, ) -> Weight {
        Weight::from_ref_time(34_223_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(60_000).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council ProposalOf (r:0 w:1)
    fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(35_295_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(15_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(139_000).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:1)
    // Storage: Council Proposals (r:1 w:1)
    fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(39_851_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(5_000).saturating_mul(b as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(42_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(182_000).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Prime (r:1 w:0)
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council ProposalOf (r:0 w:1)
    fn close_disapproved(m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(36_649_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(38_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(134_000).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Council Voting (r:1 w:1)
    // Storage: Council Members (r:1 w:0)
    // Storage: Council Prime (r:1 w:0)
    // Storage: Council ProposalOf (r:1 w:1)
    // Storage: Council Proposals (r:1 w:1)
    fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
        Weight::from_ref_time(38_815_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(6_000).saturating_mul(b as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(64_000).saturating_mul(m as u64))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(197_000).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: Council Proposals (r:1 w:1)
    // Storage: Council Voting (r:0 w:1)
    // Storage: Council ProposalOf (r:0 w:1)
    fn disapprove_proposal(p: u32, ) -> Weight {
        Weight::from_ref_time(20_447_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(192_000).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
}
