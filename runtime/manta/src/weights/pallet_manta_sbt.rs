// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_manta_sbt
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-21, STEPS: `50`, REPEAT: 40, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json
// --steps=50
// --repeat=40
// --pallet=pallet_manta_sbt
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_manta_sbt.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_manta_sbt.
pub trait WeightInfo {
	fn to_private() -> Weight;
	fn reserve_sbt() -> Weight;
	fn change_allowlist_account() -> Weight;
	fn allowlist_evm_account() -> Weight;
	fn new_mint_info() -> Weight;
	fn update_mint_info() -> Weight;
	fn mint_sbt_eth() -> Weight;
	fn change_free_reserve_account() -> Weight;
	fn remove_allowlist_evm_account() -> Weight;
	fn set_next_sbt_id() -> Weight;
	fn force_to_private() -> Weight;
	fn force_mint_sbt_eth() -> Weight;
	fn change_force_account() -> Weight;
}

/// Weights for pallet_manta_sbt using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_manta_sbt::WeightInfo for SubstrateWeight<T> {
	/// Storage: MantaSbt MintIdRegistry (r:1 w:0)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: MantaSbt PublicMintList (r:1 w:0)
	/// Proof: MantaSbt PublicMintList (max_values: None, max_size: Some(20), added: 2495, mode: MaxEncodedLen)
	/// Storage: MantaSbt ReservedIds (r:1 w:1)
	/// Proof: MantaSbt ReservedIds (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn to_private() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5845`
		//  Estimated: `4119`
		// Minimum execution time: 39_416_727_000 picoseconds.
		Weight::from_parts(39_466_891_000, 4119)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: MantaSbt ReservedIds (r:1 w:1)
	/// Proof: MantaSbt ReservedIds (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: MantaSbt FreeReserveAccount (r:1 w:0)
	/// Proof: MantaSbt FreeReserveAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:1)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn reserve_sbt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `3593`
		// Minimum execution time: 64_926_000 picoseconds.
		Weight::from_parts(66_058_000, 3593)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: MantaSbt AllowlistAccount (r:0 w:1)
	/// Proof: MantaSbt AllowlistAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn change_allowlist_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_943_000 picoseconds.
		Weight::from_parts(10_338_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt MintIdRegistry (r:1 w:0)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: MantaSbt AllowlistAccount (r:1 w:0)
	/// Proof: MantaSbt AllowlistAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: MantaSbt EvmAccountAllowlist (r:1 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:1)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn allowlist_evm_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `564`
		//  Estimated: `3804`
		// Minimum execution time: 29_460_000 picoseconds.
		Weight::from_parts(30_087_000, 3804)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: MantaSbt NextMintId (r:1 w:1)
	/// Proof: MantaSbt NextMintId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: MantaSbt PublicMintList (r:0 w:1)
	/// Proof: MantaSbt PublicMintList (max_values: None, max_size: Some(20), added: 2495, mode: MaxEncodedLen)
	/// Storage: MantaSbt MintIdRegistry (r:0 w:1)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	fn new_mint_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `862`
		//  Estimated: `1489`
		// Minimum execution time: 17_206_000 picoseconds.
		Weight::from_parts(17_605_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: MantaSbt MintIdRegistry (r:1 w:1)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: MantaSbt PublicMintList (r:0 w:1)
	/// Proof: MantaSbt PublicMintList (max_values: None, max_size: Some(20), added: 2495, mode: MaxEncodedLen)
	fn update_mint_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `433`
		//  Estimated: `3804`
		// Minimum execution time: 18_057_000 picoseconds.
		Weight::from_parts(18_654_000, 3804)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: MantaSbt MintIdRegistry (r:1 w:0)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System BlockHash (r:1 w:0)
	/// Proof: System BlockHash (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: MantaSbt EvmAccountAllowlist (r:1 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn mint_sbt_eth() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5917`
		//  Estimated: `4119`
		// Minimum execution time: 39_478_357_000 picoseconds.
		Weight::from_parts(39_529_888_000, 4119)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: MantaSbt AllowlistAccount (r:0 w:1)
	/// Proof: MantaSbt AllowlistAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn change_free_reserve_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_047_000 picoseconds.
		Weight::from_parts(10_378_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt EvmAccountAllowlist (r:0 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn remove_allowlist_evm_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_762_000 picoseconds.
		Weight::from_parts(12_153_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt NextSbtId (r:0 w:1)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_next_sbt_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_900_000 picoseconds.
		Weight::from_parts(10_204_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt ForceAccount (r:1 w:0)
	/// Proof: MantaSbt ForceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:0)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn force_to_private() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5568`
		//  Estimated: `4119`
		// Minimum execution time: 39_414_300_000 picoseconds.
		Weight::from_parts(39_463_624_000, 4119)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: MantaSbt ForceAccount (r:1 w:0)
	/// Proof: MantaSbt ForceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:0)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt EvmAccountAllowlist (r:1 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn force_mint_sbt_eth() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5568`
		//  Estimated: `4119`
		// Minimum execution time: 39_404_233_000 picoseconds.
		Weight::from_parts(39_457_731_000, 4119)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: MantaSbt ForceAccount (r:0 w:1)
	/// Proof: MantaSbt ForceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn change_force_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_046_000 picoseconds.
		Weight::from_parts(10_416_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: MantaSbt MintIdRegistry (r:1 w:0)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: MantaSbt PublicMintList (r:1 w:0)
	/// Proof: MantaSbt PublicMintList (max_values: None, max_size: Some(20), added: 2495, mode: MaxEncodedLen)
	/// Storage: MantaSbt ReservedIds (r:1 w:1)
	/// Proof: MantaSbt ReservedIds (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn to_private() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5845`
		//  Estimated: `4119`
		// Minimum execution time: 39_416_727_000 picoseconds.
		Weight::from_parts(39_466_891_000, 4119)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: MantaSbt ReservedIds (r:1 w:1)
	/// Proof: MantaSbt ReservedIds (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: MantaSbt FreeReserveAccount (r:1 w:0)
	/// Proof: MantaSbt FreeReserveAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:1)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn reserve_sbt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `3593`
		// Minimum execution time: 64_926_000 picoseconds.
		Weight::from_parts(66_058_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: MantaSbt AllowlistAccount (r:0 w:1)
	/// Proof: MantaSbt AllowlistAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn change_allowlist_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_943_000 picoseconds.
		Weight::from_parts(10_338_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt MintIdRegistry (r:1 w:0)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: MantaSbt AllowlistAccount (r:1 w:0)
	/// Proof: MantaSbt AllowlistAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: MantaSbt EvmAccountAllowlist (r:1 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:1)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn allowlist_evm_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `564`
		//  Estimated: `3804`
		// Minimum execution time: 29_460_000 picoseconds.
		Weight::from_parts(30_087_000, 3804)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: MantaSbt NextMintId (r:1 w:1)
	/// Proof: MantaSbt NextMintId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: MantaSbt PublicMintList (r:0 w:1)
	/// Proof: MantaSbt PublicMintList (max_values: None, max_size: Some(20), added: 2495, mode: MaxEncodedLen)
	/// Storage: MantaSbt MintIdRegistry (r:0 w:1)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	fn new_mint_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `862`
		//  Estimated: `1489`
		// Minimum execution time: 17_206_000 picoseconds.
		Weight::from_parts(17_605_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: MantaSbt MintIdRegistry (r:1 w:1)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: MantaSbt PublicMintList (r:0 w:1)
	/// Proof: MantaSbt PublicMintList (max_values: None, max_size: Some(20), added: 2495, mode: MaxEncodedLen)
	fn update_mint_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `433`
		//  Estimated: `3804`
		// Minimum execution time: 18_057_000 picoseconds.
		Weight::from_parts(18_654_000, 3804)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: MantaSbt MintIdRegistry (r:1 w:0)
	/// Proof: MantaSbt MintIdRegistry (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System BlockHash (r:1 w:0)
	/// Proof: System BlockHash (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: MantaSbt EvmAccountAllowlist (r:1 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn mint_sbt_eth() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5917`
		//  Estimated: `4119`
		// Minimum execution time: 39_478_357_000 picoseconds.
		Weight::from_parts(39_529_888_000, 4119)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: MantaSbt AllowlistAccount (r:0 w:1)
	/// Proof: MantaSbt AllowlistAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn change_free_reserve_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_047_000 picoseconds.
		Weight::from_parts(10_378_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt EvmAccountAllowlist (r:0 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn remove_allowlist_evm_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_762_000 picoseconds.
		Weight::from_parts(12_153_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt NextSbtId (r:0 w:1)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_next_sbt_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_900_000 picoseconds.
		Weight::from_parts(10_204_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: MantaSbt ForceAccount (r:1 w:0)
	/// Proof: MantaSbt ForceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:0)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn force_to_private() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5568`
		//  Estimated: `4119`
		// Minimum execution time: 39_414_300_000 picoseconds.
		Weight::from_parts(39_463_624_000, 4119)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: MantaSbt ForceAccount (r:1 w:0)
	/// Proof: MantaSbt ForceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: MantaSbt NextSbtId (r:1 w:0)
	/// Proof: MantaSbt NextSbtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: MantaSbt SbtMetadataV2 (r:1 w:1)
	/// Proof: MantaSbt SbtMetadataV2 (max_values: None, max_size: Some(373), added: 2848, mode: MaxEncodedLen)
	/// Storage: MantaSbt EvmAccountAllowlist (r:1 w:1)
	/// Proof: MantaSbt EvmAccountAllowlist (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: MantaSbt UtxoSet (r:1 w:1)
	/// Proof: MantaSbt UtxoSet (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: MantaSbt ShardTrees (r:1 w:1)
	/// Proof: MantaSbt ShardTrees (max_values: None, max_size: Some(654), added: 3129, mode: MaxEncodedLen)
	/// Storage: MantaSbt Shards (r:0 w:1)
	/// Proof: MantaSbt Shards (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
	fn force_mint_sbt_eth() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5568`
		//  Estimated: `4119`
		// Minimum execution time: 39_404_233_000 picoseconds.
		Weight::from_parts(39_457_731_000, 4119)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: MantaSbt ForceAccount (r:0 w:1)
	/// Proof: MantaSbt ForceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn change_force_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_046_000 picoseconds.
		Weight::from_parts(10_416_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
