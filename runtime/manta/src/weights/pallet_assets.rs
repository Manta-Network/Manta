// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_assets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("calamari-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=calamari-dev
// --steps=50
// --repeat=20
// --pallet=pallet_assets
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_assets.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use manta_primitives::constants::RocksDbWeight;

/// Weight functions needed for pallet_assets.
pub trait WeightInfo {
    fn create() -> Weight;
    fn force_create() -> Weight;
    fn start_destroy() -> Weight;
    fn destroy_accounts(c: u32) -> Weight;
    fn destroy_approvals(m: u32) -> Weight;
    fn finish_destroy() -> Weight;
    fn mint() -> Weight;
    fn burn() -> Weight;
    fn transfer() -> Weight;
    fn transfer_keep_alive() -> Weight;
    fn force_transfer() -> Weight;
    fn freeze() -> Weight;
    fn thaw() -> Weight;
    fn freeze_asset() -> Weight;
    fn thaw_asset() -> Weight;
    fn transfer_ownership() -> Weight;
    fn set_team() -> Weight;
    fn set_metadata(n: u32, s: u32, ) -> Weight;
    fn clear_metadata() -> Weight;
    fn force_set_metadata(n: u32, s: u32, ) -> Weight;
    fn force_clear_metadata() -> Weight;
    fn force_asset_status() -> Weight;
    fn approve_transfer() -> Weight;
    fn transfer_approved() -> Weight;
    fn cancel_approval() -> Weight;
    fn force_cancel_approval() -> Weight;
}

/// Weights for pallet_assets using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_assets::WeightInfo for SubstrateWeight<T> {
    // Storage: Assets Asset (r:1 w:1)
    fn create() -> Weight {
        // Minimum execution time: 33_241 nanoseconds.
        Weight::from_ref_time(33_873_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn force_create() -> Weight {
        // Minimum execution time: 19_883 nanoseconds.
        Weight::from_ref_time(20_651_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    // Storage: Assets Asset (r:1 w:1)
    fn start_destroy() -> Weight {
        Weight::from_ref_time(31_000_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:1 w:0)
    // Storage: System Account (r:20 w:20)
    /// The range of component `c` is `[0, 1000]`.
    fn destroy_accounts(c: u32, ) -> Weight {
        Weight::from_ref_time(37_000_000_u64)
            // Standard Error: 19_301
            .saturating_add(Weight::from_ref_time(25_467_908_u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c as u64)))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c as u64)))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:0)
    /// The range of component `a` is `[0, 1000]`.
    fn destroy_approvals(a: u32, ) -> Weight {
        Weight::from_ref_time(39_000_000_u64)
            // Standard Error: 14_298
            .saturating_add(Weight::from_ref_time(27_632_144_u64).saturating_mul(a as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a as u64)))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a as u64)))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Metadata (r:1 w:0)
    fn finish_destroy() -> Weight {
        Weight::from_ref_time(33_000_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:1 w:1)
    fn mint() -> Weight {
        // Minimum execution time: 36_782 nanoseconds.
        Weight::from_ref_time(37_340_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:1 w:1)
    fn burn() -> Weight {
        // Minimum execution time: 44_425 nanoseconds.
        Weight::from_ref_time(45_485_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn transfer() -> Weight {
        // Minimum execution time: 58_294 nanoseconds.
        Weight::from_ref_time(59_447_000_u64)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn transfer_keep_alive() -> Weight {
        // Minimum execution time: 46_704 nanoseconds.
        Weight::from_ref_time(47_521_000_u64)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn force_transfer() -> Weight {
        // Minimum execution time: 57_647 nanoseconds.
        Weight::from_ref_time(58_417_000_u64)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Account (r:1 w:1)
    fn freeze() -> Weight {
        // Minimum execution time: 26_827 nanoseconds.
        Weight::from_ref_time(27_373_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Account (r:1 w:1)
    fn thaw() -> Weight {
        // Minimum execution time: 26_291 nanoseconds.
        Weight::from_ref_time(26_854_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn freeze_asset() -> Weight {
        // Minimum execution time: 22_694 nanoseconds.
        Weight::from_ref_time(23_613_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn thaw_asset() -> Weight {
        // Minimum execution time: 22_572 nanoseconds.
        Weight::from_ref_time(24_121_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Metadata (r:1 w:0)
    fn transfer_ownership() -> Weight {
        // Minimum execution time: 23_949 nanoseconds.
        Weight::from_ref_time(24_347_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn set_team() -> Weight {
        // Minimum execution time: 23_102 nanoseconds.
        Weight::from_ref_time(23_518_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    /// The range of component `n` is `[0, 50]`.
    /// The range of component `s` is `[0, 50]`.
    fn set_metadata(_n: u32, s: u32, ) -> Weight {
        // Minimum execution time: 41_032 nanoseconds.
        Weight::from_ref_time(42_845_624_u64)
            // Standard Error: 1_274
            .saturating_add(Weight::from_ref_time(1_875_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    fn clear_metadata() -> Weight {
        // Minimum execution time: 42_570 nanoseconds.
        Weight::from_ref_time(42_957_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    /// The range of component `n` is `[0, 50]`.
    /// The range of component `s` is `[0, 50]`.
    fn force_set_metadata(n: u32, s: u32, ) -> Weight {
        // Minimum execution time: 22_768 nanoseconds.
        Weight::from_ref_time(23_868_816_u64)
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(1_602_u64).saturating_mul(n as u64))
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(2_097_u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    fn force_clear_metadata() -> Weight {
        // Minimum execution time: 41_863 nanoseconds.
        Weight::from_ref_time(42_643_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn force_asset_status() -> Weight {
        // Minimum execution time: 21_747 nanoseconds.
        Weight::from_ref_time(22_595_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:1)
    fn approve_transfer() -> Weight {
        // Minimum execution time: 45_602 nanoseconds.
        Weight::from_ref_time(46_004_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Assets Approvals (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn transfer_approved() -> Weight {
        // Minimum execution time: 70_944 nanoseconds.
        Weight::from_ref_time(71_722_000_u64)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:1)
    fn cancel_approval() -> Weight {
        // Minimum execution time: 46_316 nanoseconds.
        Weight::from_ref_time(46_910_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:1)
    fn force_cancel_approval() -> Weight {
        // Minimum execution time: 47_145 nanoseconds.
        Weight::from_ref_time(47_611_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: Assets Asset (r:1 w:1)
    fn create() -> Weight {
        // Minimum execution time: 33_241 nanoseconds.
        Weight::from_ref_time(33_873_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn force_create() -> Weight {
        // Minimum execution time: 19_883 nanoseconds.
        Weight::from_ref_time(20_651_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    // Storage: Assets Asset (r:1 w:1)
    fn start_destroy() -> Weight {
        Weight::from_ref_time(31_000_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:1 w:0)
    // Storage: System Account (r:20 w:20)
    /// The range of component `c` is `[0, 1000]`.
    fn destroy_accounts(c: u32, ) -> Weight {
        Weight::from_ref_time(37_000_000_u64)
            // Standard Error: 19_301
            .saturating_add(Weight::from_ref_time(25_467_908_u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c as u64)))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c as u64)))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:0)
    /// The range of component `a` is `[0, 1000]`.
    fn destroy_approvals(a: u32, ) -> Weight {
        Weight::from_ref_time(39_000_000_u64)
            // Standard Error: 14_298
            .saturating_add(Weight::from_ref_time(27_632_144_u64).saturating_mul(a as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(a as u64)))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(a as u64)))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Metadata (r:1 w:0)
    fn finish_destroy() -> Weight {
        Weight::from_ref_time(33_000_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:1 w:1)
    fn mint() -> Weight {
        // Minimum execution time: 36_782 nanoseconds.
        Weight::from_ref_time(37_340_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:1 w:1)
    fn burn() -> Weight {
        // Minimum execution time: 44_425 nanoseconds.
        Weight::from_ref_time(45_485_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn transfer() -> Weight {
        // Minimum execution time: 58_294 nanoseconds.
        Weight::from_ref_time(59_447_000_u64)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn transfer_keep_alive() -> Weight {
        // Minimum execution time: 46_704 nanoseconds.
        Weight::from_ref_time(47_521_000_u64)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn force_transfer() -> Weight {
        // Minimum execution time: 57_647 nanoseconds.
        Weight::from_ref_time(58_417_000_u64)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Account (r:1 w:1)
    fn freeze() -> Weight {
        // Minimum execution time: 26_827 nanoseconds.
        Weight::from_ref_time(27_373_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Account (r:1 w:1)
    fn thaw() -> Weight {
        // Minimum execution time: 26_291 nanoseconds.
        Weight::from_ref_time(26_854_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn freeze_asset() -> Weight {
        // Minimum execution time: 22_694 nanoseconds.
        Weight::from_ref_time(23_613_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn thaw_asset() -> Weight {
        // Minimum execution time: 22_572 nanoseconds.
        Weight::from_ref_time(24_121_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Metadata (r:1 w:0)
    fn transfer_ownership() -> Weight {
        // Minimum execution time: 23_949 nanoseconds.
        Weight::from_ref_time(24_347_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn set_team() -> Weight {
        // Minimum execution time: 23_102 nanoseconds.
        Weight::from_ref_time(23_518_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    /// The range of component `n` is `[0, 50]`.
    /// The range of component `s` is `[0, 50]`.
    fn set_metadata(_n: u32, s: u32, ) -> Weight {
        // Minimum execution time: 41_032 nanoseconds.
        Weight::from_ref_time(42_845_624_u64)
            // Standard Error: 1_274
            .saturating_add(Weight::from_ref_time(1_875_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    fn clear_metadata() -> Weight {
        // Minimum execution time: 42_570 nanoseconds.
        Weight::from_ref_time(42_957_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    /// The range of component `n` is `[0, 50]`.
    /// The range of component `s` is `[0, 50]`.
    fn force_set_metadata(n: u32, s: u32, ) -> Weight {
        // Minimum execution time: 22_768 nanoseconds.
        Weight::from_ref_time(23_868_816_u64)
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(1_602_u64).saturating_mul(n as u64))
            // Standard Error: 612
            .saturating_add(Weight::from_ref_time(2_097_u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:0)
    // Storage: Assets Metadata (r:1 w:1)
    fn force_clear_metadata() -> Weight {
        // Minimum execution time: 41_863 nanoseconds.
        Weight::from_ref_time(42_643_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    fn force_asset_status() -> Weight {
        // Minimum execution time: 21_747 nanoseconds.
        Weight::from_ref_time(22_595_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:1)
    fn approve_transfer() -> Weight {
        // Minimum execution time: 45_602 nanoseconds.
        Weight::from_ref_time(46_004_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Assets Approvals (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn transfer_approved() -> Weight {
        // Minimum execution time: 70_944 nanoseconds.
        Weight::from_ref_time(71_722_000_u64)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:1)
    fn cancel_approval() -> Weight {
        // Minimum execution time: 46_316 nanoseconds.
        Weight::from_ref_time(46_910_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Approvals (r:1 w:1)
    fn force_cancel_approval() -> Weight {
        // Minimum execution time: 47_145 nanoseconds.
        Weight::from_ref_time(47_611_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
}
