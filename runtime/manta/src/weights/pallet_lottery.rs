// Copyright 2020-2023 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_lottery
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-21, STEPS: `25`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("/home/runner/runners/2.280.1/_work/Manta/Manta/tests/data/fork.json"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=/home/runner/runners/2.280.1/_work/Manta/Manta/tests/data/fork.json
// --steps=25
// --repeat=20
// --pallet=pallet_lottery
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_lottery.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use manta_primitives::constants::RocksDbWeight;

/// Weight functions needed for pallet_lottery.
pub trait WeightInfo {
    fn deposit(x: u32, y: u32, ) -> Weight;
    fn request_withdraw(x: u32, y: u32, ) -> Weight;
    fn claim_my_winnings(y: u32, ) -> Weight;
    fn start_lottery() -> Weight;
    fn stop_lottery() -> Weight;
    fn draw_lottery(x: u32, y: u32, ) -> Weight;
    fn process_matured_withdrawals() -> Weight;
    fn set_min_deposit() -> Weight;
    fn set_min_withdraw() -> Weight;
    fn set_gas_reserve() -> Weight;
}

/// Weights for pallet_lottery using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_lottery::WeightInfo for SubstrateWeight<T> {
	// Storage: Lottery MinDeposit (r:1 w:0)
	// Storage: Scheduler Lookup (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking SelectedCandidates (r:1 w:0)
	// Storage: Lottery UnstakingCollators (r:1 w:0)
	// Storage: Lottery StakedCollators (r:2 w:1)
	// Storage: ParachainStaking CandidateInfo (r:2 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Lottery ActiveBalancePerUser (r:1 w:1)
	// Storage: Lottery TotalPot (r:1 w:1)
	// Storage: Lottery TotalUsers (r:1 w:1)
	// Storage: Lottery SumOfDeposits (r:1 w:1)
	// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn deposit(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 186_372 nanoseconds.
		Weight::from_ref_time(194_286_064)
			// Standard Error: 1_705
			.saturating_add(Weight::from_ref_time(179_347).saturating_mul(x.into()))
			// Standard Error: 26_861
			.saturating_add(Weight::from_ref_time(335_838).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(23))
			.saturating_add(T::DbWeight::get().writes(13))
	}
	// Storage: Lottery MinWithdraw (r:1 w:0)
	// Storage: Scheduler Lookup (r:1 w:0)
	// Storage: Lottery ActiveBalancePerUser (r:1 w:1)
	// Storage: Lottery WithdrawalRequestQueue (r:1 w:1)
	// Storage: Lottery TotalUsers (r:1 w:1)
	// Storage: Lottery TotalPot (r:1 w:1)
	// Storage: Lottery SurplusUnstakingBalance (r:1 w:1)
	// Storage: Lottery StakedCollators (r:2 w:0)
	// Storage: Lottery UnstakingCollators (r:1 w:1)
	// Storage: ParachainStaking SelectedCandidates (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn request_withdraw(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 112_850 nanoseconds.
		Weight::from_ref_time(118_169_320)
			// Standard Error: 1_026
			.saturating_add(Weight::from_ref_time(102_736).saturating_mul(x.into()))
			// Standard Error: 16_175
			.saturating_add(Weight::from_ref_time(133_934).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Lottery UnclaimedWinningsByAccount (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Lottery SumOfDeposits (r:1 w:0)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:1)
	/// The range of component `y` is `[0, 63]`.
	fn claim_my_winnings(y: u32, ) -> Weight {
		// Minimum execution time: 55_405 nanoseconds.
		Weight::from_ref_time(58_281_319)
			// Standard Error: 7_376
			.saturating_add(Weight::from_ref_time(150_431).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: Lottery GasReserve (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn start_lottery() -> Weight {
		// Minimum execution time: 48_080 nanoseconds.
		Weight::from_ref_time(49_988_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn stop_lottery() -> Weight {
		// Minimum execution time: 33_159 nanoseconds.
		Weight::from_ref_time(33_734_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:1)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: Lottery GasReserve (r:1 w:0)
	// Storage: Lottery TotalPot (r:1 w:0)
	// Storage: Lottery SumOfDeposits (r:1 w:0)
	// Storage: Lottery ActiveBalancePerUser (r:2 w:0)
	// Storage: Lottery UnclaimedWinningsByAccount (r:1 w:1)
	// Storage: Lottery UnstakingCollators (r:1 w:0)
	// Storage: Lottery WithdrawalRequestQueue (r:1 w:0)
	// Storage: Lottery MinDeposit (r:1 w:0)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn draw_lottery(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 86_822 nanoseconds.
		Weight::from_ref_time(87_226_000)
			// Standard Error: 82_274
			.saturating_add(Weight::from_ref_time(970_590).saturating_mul(x.into()))
			// Standard Error: 1_308_971
			.saturating_add(Weight::from_ref_time(15_955_308).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Lottery UnstakingCollators (r:1 w:0)
	// Storage: Lottery WithdrawalRequestQueue (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: Lottery MinDeposit (r:1 w:0)
	fn process_matured_withdrawals() -> Weight {
		// Minimum execution time: 15_166 nanoseconds.
		Weight::from_ref_time(15_686_000)
			.saturating_add(T::DbWeight::get().reads(4))
	}
	// Storage: Lottery MinWithdraw (r:1 w:0)
	// Storage: Lottery MinDeposit (r:0 w:1)
	fn set_min_deposit() -> Weight {
		// Minimum execution time: 8_435 nanoseconds.
		Weight::from_ref_time(8_670_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Lottery MinWithdraw (r:0 w:1)
	fn set_min_withdraw() -> Weight {
		// Minimum execution time: 4_402 nanoseconds.
		Weight::from_ref_time(4_542_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Lottery GasReserve (r:0 w:1)
	fn set_gas_reserve() -> Weight {
		// Minimum execution time: 4_309 nanoseconds.
		Weight::from_ref_time(4_551_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Lottery MinDeposit (r:1 w:0)
	// Storage: Scheduler Lookup (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking SelectedCandidates (r:1 w:0)
	// Storage: Lottery UnstakingCollators (r:1 w:0)
	// Storage: Lottery StakedCollators (r:2 w:1)
	// Storage: ParachainStaking CandidateInfo (r:2 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	// Storage: ParachainStaking TopDelegations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Lottery ActiveBalancePerUser (r:1 w:1)
	// Storage: Lottery TotalPot (r:1 w:1)
	// Storage: Lottery TotalUsers (r:1 w:1)
	// Storage: Lottery SumOfDeposits (r:1 w:1)
	// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn deposit(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 186_372 nanoseconds.
		Weight::from_ref_time(194_286_064)
			// Standard Error: 1_705
			.saturating_add(Weight::from_ref_time(179_347).saturating_mul(x.into()))
			// Standard Error: 26_861
			.saturating_add(Weight::from_ref_time(335_838).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(23))
			.saturating_add(RocksDbWeight::get().writes(13))
	}
	// Storage: Lottery MinWithdraw (r:1 w:0)
	// Storage: Scheduler Lookup (r:1 w:0)
	// Storage: Lottery ActiveBalancePerUser (r:1 w:1)
	// Storage: Lottery WithdrawalRequestQueue (r:1 w:1)
	// Storage: Lottery TotalUsers (r:1 w:1)
	// Storage: Lottery TotalPot (r:1 w:1)
	// Storage: Lottery SurplusUnstakingBalance (r:1 w:1)
	// Storage: Lottery StakedCollators (r:2 w:0)
	// Storage: Lottery UnstakingCollators (r:1 w:1)
	// Storage: ParachainStaking SelectedCandidates (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn request_withdraw(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 112_850 nanoseconds.
		Weight::from_ref_time(118_169_320)
			// Standard Error: 1_026
			.saturating_add(Weight::from_ref_time(102_736).saturating_mul(x.into()))
			// Standard Error: 16_175
			.saturating_add(Weight::from_ref_time(133_934).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: Lottery UnclaimedWinningsByAccount (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Lottery SumOfDeposits (r:1 w:0)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:1)
	/// The range of component `y` is `[0, 63]`.
	fn claim_my_winnings(y: u32, ) -> Weight {
		// Minimum execution time: 55_405 nanoseconds.
		Weight::from_ref_time(58_281_319)
			// Standard Error: 7_376
			.saturating_add(Weight::from_ref_time(150_431).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: Lottery GasReserve (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn start_lottery() -> Weight {
		// Minimum execution time: 48_080 nanoseconds.
		Weight::from_ref_time(49_988_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn stop_lottery() -> Weight {
		// Minimum execution time: 33_159 nanoseconds.
		Weight::from_ref_time(33_734_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: Lottery TotalUnclaimedWinnings (r:1 w:1)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: Lottery GasReserve (r:1 w:0)
	// Storage: Lottery TotalPot (r:1 w:0)
	// Storage: Lottery SumOfDeposits (r:1 w:0)
	// Storage: Lottery ActiveBalancePerUser (r:2 w:0)
	// Storage: Lottery UnclaimedWinningsByAccount (r:1 w:1)
	// Storage: Lottery UnstakingCollators (r:1 w:0)
	// Storage: Lottery WithdrawalRequestQueue (r:1 w:0)
	// Storage: Lottery MinDeposit (r:1 w:0)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn draw_lottery(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 86_822 nanoseconds.
		Weight::from_ref_time(87_226_000)
			// Standard Error: 82_274
			.saturating_add(Weight::from_ref_time(970_590).saturating_mul(x.into()))
			// Standard Error: 1_308_971
			.saturating_add(Weight::from_ref_time(15_955_308).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(13))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Lottery UnstakingCollators (r:1 w:0)
	// Storage: Lottery WithdrawalRequestQueue (r:1 w:0)
	// Storage: Lottery UnlockedUnstakingFunds (r:1 w:0)
	// Storage: Lottery MinDeposit (r:1 w:0)
	fn process_matured_withdrawals() -> Weight {
		// Minimum execution time: 15_166 nanoseconds.
		Weight::from_ref_time(15_686_000)
			.saturating_add(RocksDbWeight::get().reads(4))
	}
	// Storage: Lottery MinWithdraw (r:1 w:0)
	// Storage: Lottery MinDeposit (r:0 w:1)
	fn set_min_deposit() -> Weight {
		// Minimum execution time: 8_435 nanoseconds.
		Weight::from_ref_time(8_670_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Lottery MinWithdraw (r:0 w:1)
	fn set_min_withdraw() -> Weight {
		// Minimum execution time: 4_402 nanoseconds.
		Weight::from_ref_time(4_542_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Lottery GasReserve (r:0 w:1)
	fn set_gas_reserve() -> Weight {
		// Minimum execution time: 4_309 nanoseconds.
		Weight::from_ref_time(4_551_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
